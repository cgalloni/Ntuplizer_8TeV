#ifndef NtupleBranches_H
#define NtupleBranches_H

#include <DataFormats/PatCandidates/interface/Electron.h>
#include <DataFormats/PatCandidates/interface/Muon.h>
#include <DataFormats/PatCandidates/interface/Tau.h>
#include <DataFormats/MuonReco/interface/Muon.h>
#include "DataFormats/VertexReco/interface/Vertex.h"
#include "DataFormats/EgammaCandidates/interface/GsfElectron.h"
#include "DataFormats/EgammaCandidates/interface/Conversion.h"
#include "DataFormats/RecoCandidate/interface/IsoDeposit.h"
#include <DataFormats/PatCandidates/interface/MET.h>
#include <DataFormats/PatCandidates/interface/Jet.h>
#include <DataFormats/JetReco/interface/Jet.h>
#include "DataFormats/FWLite/interface/Event.h"
#include "DataFormats/Common/interface/Handle.h"
#include "DataFormats/Common/interface/TriggerResults.h"
#include "FWCore/Common/interface/TriggerNames.h"
#include "RecoEgamma/EgammaTools/interface/ConversionTools.h"
#include "RecoEgamma/EgammaTools/interface/ConversionFinder.h"
#include "DataFormats/MuonReco/interface/MuonFwd.h"
#include "DataFormats/MuonReco/interface/MuonCocktails.h"
#include "SimDataFormats/PileupSummaryInfo/interface/PileupSummaryInfo.h"
#include "SimDataFormats/GeneratorProducts/interface/LHEEventProduct.h"
#include "TauAnalysis/CandidateTools/interface/NSVfitStandaloneAlgorithm.h"
#include "FWCore/Framework/interface/Event.h"
#include "TMatrixD.h"
#include "TMatrix.h"

#include "TTree.h"
#include "TLorentzVector.h"

/*here we declare the input and output variables*/

class NtupleBranches {

public:
   NtupleBranches( TTree* tree = 0 );
   ~NtupleBranches( void );
   
   void branch( void );
   void getEventByLabels( edm::EventBase const & event );
   void reset( void );
   void fillTree( void ){ tree_->Fill(); };

//=================================================================================================================== 
  /* output tree variables*/
    
    /*----------------------gen particles-------------------------*/
    float                             lheV_pt                ;
    float                             lheHT                  ;
    float                             lheNj                  ;
    std::vector<float>  	      genParticle_pt	     ;
    std::vector<float>  	      genParticle_px	     ;
    std::vector<float>  	      genParticle_py	     ;
    std::vector<float>  	      genParticle_pz	     ;
    std::vector<float>  	      genParticle_e	     ;
    std::vector<float>  	      genParticle_eta	     ;
    std::vector<float>  	      genParticle_phi	     ;
    std::vector<float>  	      genParticle_mass       ;
    std::vector<int  >  	      genParticle_pdgId      ;
    std::vector<int  >  	      genParticle_status     ;
    std::vector<int  >  	      genParticle_nDau       ;
    std::vector<int  >  	      genParticle_nMoth      ;
    std::vector<std::vector<int> >    genParticle_mother     ; 
    std::vector<std::vector<int> >    genParticle_dau        ;

    /*-----------------------AK5 gen jets-------------------------*/
    int 	        	      ngenjetsAK5            ;
    std::vector<float>                genJetAK5_pt           ;
    std::vector<float>  	      genJetAK5_eta          ;
    std::vector<float>  	      genJetAK5_mass         ;
    std::vector<float>  	      genJetAK5_phi          ;
    std::vector<float>  	      genJetAK5_e            ;    

    /*--------------------AK5 gen jets NoNu-----------------------*/
    std::vector<float>                genJetAK5nonu_pt       ;
    std::vector<float>  	      genJetAK5nonu_eta      ;
    std::vector<float>  	      genJetAK5nonu_mass     ;
    std::vector<float>  	      genJetAK5nonu_phi      ;
    std::vector<float>  	      genJetAK5nonu_e        ; 
    
    /*-----------------------CA8 gen jets-------------------------*/
    int 	        	      ngenjetsCA8            ;
    std::vector<float>                genJetCA8_pt           ;
    std::vector<float>  	      genJetCA8_eta          ;
    std::vector<float>  	      genJetCA8_mass         ;
    std::vector<float>  	      genJetCA8_phi          ;
    std::vector<float>  	      genJetCA8_e            ;    

    /*--------------------CA8 gen jets NoNu-----------------------*/
    std::vector<float>  	      genJetCA8nonu_pt       ;
    std::vector<float>  	      genJetCA8nonu_eta      ;
    std::vector<float>  	      genJetCA8nonu_mass     ;
    std::vector<float>  	      genJetCA8nonu_phi      ;
    std::vector<float>  	      genJetCA8nonu_e        ; 
        
    /*-------------------------leptons----------------------------*/
    int 	                      nlep		             ;
    std::vector<int  >  	      lep_type		         ;
    std::vector<float>  	      lep_charge	         ;
    std::vector<float>  	      lep_e 		         ;
    std::vector<float>  	      lep_eta		         ;
    std::vector<float>  	      lep_mass		         ;
    std::vector<float>  	      lep_pt		         ;
    std::vector<float>  	      lep_phi		         ;
    std::vector<float>  	      lep_dz		         ;
    std::vector<float>  	      lep_dxy		         ;
    std::vector<float>  	      lep_idMVAtrig 	         ;
    std::vector<int  >  	      lep_vetoId	         ;//wp95	   
    std::vector<int  >  	      lep_looseId	         ;//wp90
    std::vector<int  >  	      lep_mediumId               ;//wp80
    std::vector<int  >  	      lep_tightId	         ;//wp70 
    std::vector<int  >  	      lep_trigTightId	         ;
    std::vector<int  >  	      lep_isHEEP	         ;
    std::vector<int  >  	      lep_isASelection	         ; // it is in Aniello's selection : regular for muon and electrons , for taus I save:
                                                                   // isATauSelection for taus 
                                                                    //or isAEleTauSelection  for EleTau or isAMuTauSelection for MuTau 
    std::vector<int  >  	      lep_isAGlobal	         ;// Aniello's Global definition 
    std::vector<int  >  	      lep_isATracker	         ;// Aniello's Tracker definition 
    std::vector<int  >  	      lep_isCSelection	         ;                                                               
/*     std::vector<int  >  	      lep_isADilSelection        ; */
    std::vector<float>                lep_cktTrack_pt            ;
    std::vector<int  >                lep_isLooseMuon            ;
    std::vector<int  >                lep_isSoftMuon             ;
    std::vector<int  >                lep_isTightMuon            ;
    std::vector<int  >                lep_isHighPtMuon           ;
    std::vector<float>  	      lep_pfRhoCorrRelIso03      ;
    std::vector<float>  	      lep_pfRhoCorrRelIso04      ;
    std::vector<float>  	      lep_pfDeltaCorrRelIso      ;
    std::vector<float>  	      lep_pfRelIso  	         ;
    std::vector<float>  	      lep_photonIso 	         ;
    std::vector<float>  	      lep_neutralHadIso	         ;
    std::vector<float>  	      lep_chargedHadIso	         ;
    std::vector<float>  	      lep_trackIso	         ;    
    std::vector<float>  	      lep_pfRhoCorrRelIso03Boost ;
    std::vector<float>  	      lep_pfRhoCorrRelIso04Boost ;
    std::vector<float>  	      lep_pfDeltaCorrRelIsoBoost ;
    std::vector<float>  	      lep_pfRelIsoBoost  	 ;    
    std::vector<float>  	      lep_photonIsoBoost 	 ;
    std::vector<float>  	      lep_neutralHadIsoBoost     ;
    std::vector<float>  	      lep_chargedHadIsoBoost     ;
 
     /////////   
 
    std::vector<float>  	      lep_SemileptonicPFIso 	 ;//Aniello's  Isolations for semileptonic channel and  
    std::vector<float>  	      lep_SemileptonicCorrPFIso  ; // the simple PF one, the corrected one for the tau presence
    std::vector<float>  	      lep_DilPFIso               ;//  (IT depends if in the pattuple we use Cesar's or aniello prescription) 
    std::vector<float>  	      lep_DilDETIso              ;// and  dilepton channel PF and DET isolation
    std::vector<float>  	      lep_normChi2  	         ;
    std::vector<int  >  	      lep_isGlobalMuon	         ;
    std::vector<int  >  	      lep_trackerHits	         ;
    std::vector<int  >  	      lep_matchedStations        ;
    std::vector<int  >  	      lep_pixelHits 	         ;
    std::vector<int  >  	      lep_globalHits	         ;
    std::vector<int  >  	      lep_TauType	         ;  //0 :ele and mu, 1 tau boosted, 2 eletau, 3 mutau

    std::vector<int  >  	      lep_isATauSelection	 ; //filled just for taus
    std::vector<int  >  	      lep_isAEleTauSelection	 ; //fileld just for taus
    std::vector<int  >  	      lep_isAMuTauSelection	 ; //filled just for taus      
   /*-------------------------Tau Discriminant-------------------*/

    std::vector<float>  	      decayModeFindingNewDMs			  ;
    std::vector<float>                decayModeFindingOldDMs			  ;
    std::vector<float>                decayModeFinding  			  ;
    std::vector<float>                byLooseIsolation  			  ;
    std::vector<float>                byVLooseCombinedIsolationDeltaBetaCorr	  ;
    std::vector<float>                byLooseCombinedIsolationDeltaBetaCorr	  ;
    std::vector<float>                byMediumCombinedIsolationDeltaBetaCorr	  ;
    std::vector<float>  	      byTightCombinedIsolationDeltaBetaCorr	  ;
    std::vector<float>  	      byCombinedIsolationDeltaBetaCorrRaw	  ;
    std::vector<float>  	      byLooseCombinedIsolationDeltaBetaCorr3Hits  ;
    std::vector<float>  	      byMediumCombinedIsolationDeltaBetaCorr3Hits ;
    std::vector<float>  	      byTightCombinedIsolationDeltaBetaCorr3Hits  ;
    std::vector<float>  	      byCombinedIsolationDeltaBetaCorrRaw3Hits    ;
    std::vector<float>  	      chargedIsoPtSum				  ;
    std::vector<float>  	      neutralIsoPtSum				  ;
    std::vector<float>  	      puCorrPtSum				  ;
    std::vector<float>  	      byIsolationMVA3oldDMwoLTraw		  ;
    std::vector<float>  	      byVLooseIsolationMVA3oldDMwoLT		  ;
    std::vector<float>  	      byLooseIsolationMVA3oldDMwoLT		  ;
    std::vector<float>  	      byMediumIsolationMVA3oldDMwoLT		  ;
    std::vector<float>  	      byTightIsolationMVA3oldDMwoLT		  ;
    std::vector<float>  	      byVTightIsolationMVA3oldDMwoLT		  ;
    std::vector<float>  	      byVVTightIsolationMVA3oldDMwoLT		  ;
    std::vector<float>  	      byIsolationMVA3oldDMwLTraw		  ;
    std::vector<float>  	      byVLooseIsolationMVA3oldDMwLT		  ;
    std::vector<float>  	      byLooseIsolationMVA3oldDMwLT		  ;
    std::vector<float>  	      byMediumIsolationMVA3oldDMwLT		  ;
    std::vector<float>  	      byTightIsolationMVA3oldDMwLT		  ;
    std::vector<float>  	      byVTightIsolationMVA3oldDMwLT		  ;
    std::vector<float>  	      byVVTightIsolationMVA3oldDMwLT		  ;
    std::vector<float>  	      byIsolationMVA3newDMwoLTraw		  ;
    std::vector<float>  	      byVLooseIsolationMVA3newDMwoLT		  ;
    std::vector<float>  	      byLooseIsolationMVA3newDMwoLT		  ;
    std::vector<float>  	      byMediumIsolationMVA3newDMwoLT		  ;
    std::vector<float>  	      byTightIsolationMVA3newDMwoLT		  ;
    std::vector<float>  	      byVTightIsolationMVA3newDMwoLT		  ;
    std::vector<float>  	      byVVTightIsolationMVA3newDMwoLT		  ;
    std::vector<float>  	      byIsolationMVA3newDMwLTraw		  ;
    std::vector<float>  	      byVLooseIsolationMVA3newDMwLT		  ;
    std::vector<float>  	      byLooseIsolationMVA3newDMwLT		  ;
    std::vector<float>  	      byMediumIsolationMVA3newDMwLT		  ;
    std::vector<float>  	      byTightIsolationMVA3newDMwLT		  ;
    std::vector<float>  	      byVTightIsolationMVA3newDMwLT		  ;
    std::vector<float>  	      byVVTightIsolationMVA3newDMwLT		  ;
    std::vector<float>  	      againstElectronLoose			  ;
    std::vector<float>  	      againstElectronMedium			  ;
    std::vector<float>  	      againstElectronTight			  ;
    std::vector<float>  	      againstElectronMVA5raw			  ;
    std::vector<float>  	      againstElectronMVA5category		  ;
    std::vector<float>  	      againstElectronVLooseMVA5 		  ;
    std::vector<float>  	      againstElectronLooseMVA5  		  ;
    std::vector<float>  	      againstElectronMediumMVA5 		  ;
    std::vector<float>  	      againstElectronTightMVA5  		  ;
    std::vector<float>  	      againstElectronVTightMVA5 		  ;
    std::vector<float>  	      againstElectronDeadECAL			  ;
    std::vector<float>  	      againstMuonLoose  			  ;
    std::vector<float>  	      againstMuonMedium 			  ;
    std::vector<float>  	      againstMuonTight  			  ;
    std::vector<float>  	      againstMuonLoose2 			  ;
    std::vector<float>  	      againstMuonMedium2			  ;
    std::vector<float>  	      againstMuonTight2 			  ;
    std::vector<float>  	      againstMuonLoose3 			  ;
    std::vector<float>  	      againstMuonTight3 			  ;
    std::vector<float>  	      againstMuonMVAraw 			  ;
    std::vector<float>  	      againstMuonLooseMVA			  ;
    std::vector<float>  	      againstMuonMediumMVA			  ;
    std::vector<float>  	      againstMuonTightMVA			  ;
        
    /*-------------------------AK5 jets---------------------------*/   
    int 	        	      njetsAK5               ;
    std::vector<float>  	      jetAK5_pt              ;
    std::vector<float>  	      jetAK5_eta             ;
    std::vector<float>  	      jetAK5_mass            ;
    std::vector<float>  	      jetAK5_phi             ;
    std::vector<float>  	      jetAK5_e               ;
    std::vector<float>  	      jetAK5_jec             ;
    std::vector<float>  	      jetAK5_jecUp           ;
    std::vector<float>  	      jetAK5_jecDown         ;    
    std::vector<float>  	      jetAK5_chf	     ; //ChargedHadronEnergyFraction
    std::vector<float>  	      jetAK5_nhf	     ; //NeutralHadronEnergyFraction
    std::vector<float>  	      jetAK5_cef	     ; //ChargedEmEnergyFraction
    std::vector<float>  	      jetAK5_nef	     ; //NeutralEmEnergyFraction
    std::vector<float>                jetAK5_phf             ;
    std::vector<float>                jetAK5_elf             ;
    std::vector<float>                jetAK5_muf             ;
    std::vector<int  >                jetAK5_npr             ;
    std::vector<int  >  	      jetAK5_chm	     ; //ChargedHadronMultiplicity
    std::vector<int  >  	      jetAK5_nhm 	     ; //NeutralHadronMultiplicity    
    std::vector<int  >  	      jetAK5_cm	             ; //ChargedMultiplicity
    std::vector<int  >  	      jetAK5_nm 	     ; //NeutralMultiplicity    
    std::vector<int  >  	      jetAK5_charge	     ;
    std::vector<int  >  	      jetAK5_flavour	     ;
    std::vector<float>  	      jetAK5_ssv 	     ;
    std::vector<float>  	      jetAK5_csv 	     ;    
    std::vector<float>  	      jetAK5_tchp            ;
    std::vector<float>  	      jetAK5_tche            ;
    std::vector<float>  	      jetAK5_jp              ;
    std::vector<float>  	      jetAK5_jbp             ;
    std::vector<int  >                jetAK5_nSVs            ;
    std::vector<int  >  	      jetAK5_nconstituents   ;     
    std::vector<int  >  	      jetAK5_isCJetSelection ;   
    /*-------------------------CA8 jets---------------------------*/
    int 	        	      njetsCA8               ;
    std::vector<float>  	      jetCA8_pt              ;
    std::vector<float>  	      jetCA8_eta             ;
    std::vector<float>  	      jetCA8_mass            ;
    std::vector<float>  	      jetCA8_prunedMass      ; // It is saved also later but i was computing it anyway so I saved the mass of pruned jet matched to the jet  
    std::vector<float>  	      jetCA8_phi             ;
    std::vector<float>  	      jetCA8_e               ;
    std::vector<float>  	      jetCA8_jec             ;
    std::vector<float>  	      jetCA8_jecUp           ;
    std::vector<float>  	      jetCA8_jecDown         ;
    std::vector<float>  	      jetCA8_chf	     ;
    std::vector<float>  	      jetCA8_nhf	     ;
    std::vector<float>  	      jetCA8_phf             ;
    std::vector<float>  	      jetCA8_elf             ; 
    std::vector<float>  	      jetCA8_muf             ;
    std::vector<float>  	      jetCA8_cef	     ;
    std::vector<float>  	      jetCA8_nef	     ;
    std::vector<int  >  	      jetCA8_chm	     ;
    std::vector<int  >  	      jetCA8_nhm 	     ;
    std::vector<int  >                jetCA8_npr             ;
    std::vector<int  >  	      jetCA8_cm	             ; //ChargedMultiplicity
    std::vector<int  >  	      jetCA8_nm 	     ; //NeutralMultiplicity
    std::vector<int  >  	      jetCA8_charge	     ;
    std::vector<int  >  	      jetCA8_flavour	     ;
    std::vector<float>  	      jetCA8_ssv 	     ;
    std::vector<float>  	      jetCA8_csv 	     ;    
    std::vector<float>  	      jetCA8_tchp            ;
    std::vector<float>  	      jetCA8_tche            ;
    std::vector<float>  	      jetCA8_jp              ;
    std::vector<float>  	      jetCA8_jbp             ;
    std::vector<int  >  	      jetCA8_nSVs            ; 
    std::vector<float>  	      jetCA8_tau1            ;
    std::vector<float>  	      jetCA8_tau2            ; 
    std::vector<float>  	      jetCA8_tau3            ;    
    std::vector<int  >  	      jetCA8_nconstituents   ;     
    std::vector<int  >  	      jetCA8_isAJetSelection ;  
    std::vector<int  >  	      jetCA8_isCJetSelection ;  
    std::vector<int  >  	      jetCA8_isIdL ;         
    /*----------------------CA8 jets pruned-----------------------*/
    int 	        	      njetsCA8pruned         ;
    std::vector<float>  	      jetCA8pruned_pt        ;
    std::vector<float>  	      jetCA8pruned_eta       ;
    std::vector<float>  	      jetCA8pruned_mass      ;
    std::vector<float>  	      jetCA8pruned_phi       ;
    std::vector<float>  	      jetCA8pruned_e         ;
    std::vector<float>  	      jetCA8pruned_jec       ;
    std::vector<float>  	      jetCA8pruned_jecUp     ;
    std::vector<float>  	      jetCA8pruned_jecDown   ;    
    std::vector<int  >  	      jetCA8pruned_charge    ;
    std::vector<int  >  	      jetCA8pruned_flavour   ;
    std::vector<float>  	      jetCA8pruned_ssv 	     ;
    std::vector<float>  	      jetCA8pruned_csv 	     ;    
    std::vector<float>  	      jetCA8pruned_tchp      ;
    std::vector<float>  	      jetCA8pruned_tche      ;
    std::vector<float>  	      jetCA8pruned_jp        ;
    std::vector<float>  	      jetCA8pruned_jbp       ;
    std::vector<int  >  	      jetCA8pruned_nSVs      ;         	
    
    /*----------------------CA8 subjets---------------------------*/
    std::vector<int>    	      nsubjets               ;
    std::vector< std::vector<float> > subjetCA8pruned_pt     ;
    std::vector< std::vector<float> > subjetCA8pruned_eta    ;
    std::vector< std::vector<float> > subjetCA8pruned_mass   ;
    std::vector< std::vector<float> > subjetCA8pruned_phi    ;
    std::vector< std::vector<float> > subjetCA8pruned_e      ;
    std::vector< std::vector<int  > > subjetCA8pruned_charge ;
    std::vector< std::vector<int  > > subjetCA8pruned_flavour;
    std::vector< std::vector<float> > subjetCA8pruned_ssv    ;
    std::vector< std::vector<float> > subjetCA8pruned_csv    ;    
    std::vector< std::vector<float> > subjetCA8pruned_tchp   ;
    std::vector< std::vector<float> > subjetCA8pruned_tche   ;
    std::vector< std::vector<float> > subjetCA8pruned_jp     ;
    std::vector< std::vector<float> > subjetCA8pruned_jbp    ;

 /*----------------------Tau tracks---------------------------*/
  
    std::vector<int>    nCharCand              ;
    std::vector<int>    nNeuCand               ;
    std::vector<int>    nGamCand               ;
    std::vector<int>    decayMode              ;
    std::vector<float>  leadTrack_dxy          ;
    std::vector<float>  leadTrack_dxySig       ;
    std::vector<float>  secVtxX                ;
    std::vector<float>  secVtxY                ;
    std::vector<float>  secVtxZ                ;
    std::vector<float>  flightLengthX          ;
    std::vector<float>  flightLengthY          ;
    std::vector<float>  flightLengthZ          ;
    std::vector<float>  flightLength           ;
    std::vector<float>  flightLengthSig        ;

    
    /*---------------------HLT triggers---------------------------*/    
    std::vector<int>                  HLTtrig                ; 
    //std::vector<std::string>          HLTnames               ;
    
    /*-------------------------MET--------------------------------*/
    std::vector<float>                METraw_et              ;	 
    std::vector<float>                METraw_phi             ;     
    std::vector<float>  	      MET_et                 ;
    std::vector<float>  	      MET_phi                ;
    std::vector<float>  	      MET_sig                ;
    TMatrixD     	              METraw_cov             ;
   /*  std::vector<reco::LeafCandidate::Vector>   MET_momentum                ; */    

    /*------------------------EVENT infos-------------------------*/    
    int                               EVENT_event            ;
    int                               EVENT_run              ;
    int                               EVENT_lumiBlock        ;

    /*--------------------------PV infos--------------------------*/
    int                               nPVs		     ;
    std::vector<float>                PV_x		     ;
    std::vector<float>                PV_y		     ;
    std::vector<float>                PV_z		     ;
    std::vector<float>                PV_xerr		     ;
    std::vector<float>                PV_yerr		     ;
    std::vector<float>                PV_zerr		     ;	 	       
    std::vector<float>                PV_chi2		     ;
    std::vector<int>                  PV_ndof		     ;
    
    /*--------------------------PU infos--------------------------*/  			       
    std::vector<int  >                nPuVtxTrue             ;// the *true* mean number of the poisson distribution for this event from which the number of interactions each bunch crossing has been sampled 
    std::vector<int  >                nPuVtx                 ;// the number of pileup interactions that have been added to the event in the current bunch crossing
    std::vector<int  >                bX                     ;// to which bunch crossing do these interaction belong?  
    std::vector<std::vector<float> >  PuVtxZ                 ;// the true primary vertex position along the z axis for each added interaction
    std::vector<std::vector<float> >  sumpTlow               ;// the sum of the transverse momentum of the tracks originating from each interaction, where track pT > low_cut
    std::vector<std::vector<float> >  sumpThigh              ;// the sum of the transverse momentum of the tracks originating from each interaction, where track pT > high_cut
    std::vector<std::vector<int  > >  ntrksLowpT             ;// the number of tracks originating from each interaction, where track pT > low_cut
    std::vector<std::vector<int  > >  ntrksHighpT            ;// the number of tracks originating from each interaction, where track pT > high_cut
  
private:
   TTree* tree_;

};

#endif // NtupleBranches_H
